Implement a function that adds two numbers together and returns their sum in binary. The conversion can be done before, or after the addition.

The binary number returned should be a string.

def add_binary(a,b):
    a*b    
example 2+2 = 100
    
change the last "0" to a "1" to add one
If every digit is a "1" Add a "1" to the front of the number, and "reset" all the other digits to 0



Decimal Binary  #start with zero
0	    0       #last digit is a 0: change to 1
1	    1       #all digits are 1: concatenate 1 to beginning, change all digits to 0
2	    10      #last digit is a 0: change to 1
3	    11      #all digits are 1: concatenate 1 to beginning, change all digits to 0
4	    100     #last digit is a 0: change to 1
5	    101     
6	    110     #last digit is a 0: change to 1
7	    111     #all digits are 1: concatenate 1 to beginning, change all digits to 0
8	    1000    #last digit is a 0: change to 1
9	    1001    
10	    1010    #last digit is a 0: change to 1
11	    1011    
12	    1100
13	    1101
14	    1110
15	    1111

binary = "0"
if (binary[len(binary)-1:]) == "0":
    binary = (binary[:len(binary)-1]) + ("1")
    
    AN EASIER NON-CONCATENATION METHOD
    multiply the numbers, then convert to binary.
    There seems to be an easier way to do this where you input a number and can get binary
    you take the number and put in an array
    then you can cast it as an integer and divide by two
    keep doing that and appending the results in an array (right to left) until the integer is 0
    then you check if each number in the array is odd aka NOT divisible by 2
    1 for odd 0 for even numbers, the result is the binary number
