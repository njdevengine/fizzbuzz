####THE PROBLEM

Implement a function that converts a number to binary without typecasting using bin. i.e. bin(999)

###FUNCTION

#makes function that does binary conversion on any number
def binary_conversion(target):
    #defines my array and sets numbers for the doubler
    array = [1]
    num = 1
    total = 0
    i = 0
    #doubler pops doubled numbers into array
    while num < target:
        num = num*2
        array.append(num)
    endarray = (len(array)-2)
    #will store bool numbers as an array
    boolie = []
    end = (len(array)-1)
    #checks if each number can be added to total
    #w/o exceeding target
    #adds '1' to boolie if true, else '0'
    for x in reversed(range(0,end)):
        if ((array[x]) + total) <= target:
            total = array[x] + total
            boolie.append("1")
        else:
            boolie.append("0")
    boolie = "".join(boolie)
    print(boolie)
    



###END FUNCTION

###Test function
myarray = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
total = 0
target = 999
#will store bool numbers as an array
boolie = []
#array ends at 8
end = (len(myarray))
print(end)
for x in reversed(range(0,end)):
    if ((myarray[x]) + total) <= target:
        total = myarray[x] + total
        print (str(myarray[x]) +" is @ myarray "+ str(x) +", adding a 1 to boolie \n")
        print("the new total is: " + str(total))
        boolie.append("1")
    else:
        print("adding a 0 to boolie \n")
        boolie.append("0")
boolie = "".join(boolie)
print(boolie)

###TEST FUNCTION END




####THOUGHT PROCESS

def add_binary(a,b):
    a+b    
example 2+2 (decimal number system) = 100 (binary number)

Looking at examples of binary numbers I am writing out the rules I think get from one step to the next
change the last "0" to a "1" to add one
If every digit is a "1" Add a "1" to the front of the number, and "reset" all the other digits to 0
I can't figure out the missing rules here to create a proper method I'm going to try a different approach
I need to figure out what binary even is... see chart & starter script below.


Decimal Binary  Rule
                #start with zero
0	    0       #last digit is a 0: change to 1
1	    1       #all digits are 1: concatenate 1 to beginning, change all digits to 0
2	    10      #last digit is a 0: change to 1
3	    11      #all digits are 1: concatenate 1 to beginning, change all digits to 0
4	    100     #last digit is a 0: change to 1
5	    101     
6	    110     #last digit is a 0: change to 1
7	    111     #all digits are 1: concatenate 1 to beginning, change all digits to 0
8	    1000    #last digit is a 0: change to 1
9	    1001    
10	    1010    #last digit is a 0: change to 1
11	    1011    
12	    1100
13	    1101
14	    1110
15	    1111

binary = "0"
if (binary[len(binary)-1:]) == "0":
    binary = (binary[:len(binary)-1]) + ("1")
    
####A CLEANER BUT HARDER TO CONSIDER NON-CONCATENATION METHOD
    This time im going to look up a higher number in decimal and convert it to binary
    Then I'm going to unpack the logic used to create the number
    Unlike our decimal (base ten) number system binary is a base 2 number system
    This means that in our number system the number 999 is 900+90+9 (multiples of 10)
    in binary 999 is 1111100111
    if you keep doubling 1 until it is larger than the target number you get:
    1+2+4+8+16+32+64+128+256+512+(1024)* the 1024 is too high and doesnt get added to our array
    now we iterate through to see which of these gets added
    512 = 1 yes add it (total 512)
    256 = 1 yes add it (total 768 still less than 999)
    128 = 1 yes add it (total 896 keep going)
    64 = 1 yes add it (total 960 getting close to 999)
    32 = 1 yes add it (total 992 very close to 999 probably cannot add 16)
    16 = 0 dont add it ( total 992 +8 would be 1000 next will be a 0)
    8 = 0 dont add it (total 992 +4 is fine)
    4 = 1 yes add it (total 996 keep going)
    2 = 1 yes add it (total 998 one more)
    1 = 1 yess add it (grand total 999)
    
    This looks like a legit method. I can now write a script. Here's the plan...
    
    take in a target number
    create the doubler function and append the numbers into an array
    stop adding when the doubled number is over the target
    keep adding the largest number in the array using a [sl:ice]
    if its not greater than target "1" and keep a running total if it goes over go for "0"
    Iterate through til total == target
    boom boom pow...
    find a nice way to read or spit out the binary number.
    
    Now to go write this in python.
    
    num = 1
    while num < 999
        double num (and add new number to an array)
        [1,2,4,8,16,32,64,128,256,512]
        Then check if each number in the array can be added without exceeding the array
        if it can put a 1 in a new string
        

    starting with 512, iterate through the array and keep a running total
    checking if its less than 999
    
    
    
    
                                   
    
    multiply the numbers, then convert to binary.
    There seems to be an easier way to do this where you input a number and can get binary
    you take the number and put in an array
    then you can cast it as an integer and divide by two
    keep doing that and appending the results in an array (right to left) until the integer is 0
    then you check if each number in the array is odd aka NOT divisible by 2
    1 for odd 0 for even numbers, the result is the binary number
